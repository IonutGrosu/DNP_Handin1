@page "/editadult/{Id:int}"
@using Models
@using DNP_Handin1.Data
@inject IFileAdapter FileAdapter
@inject NavigationManager NavigationManager

<Modal @bind-Open="@IsModalOpened" Close="@OnModalClose">
    <form method="dialog">
            <p>
                Do you really want to do this?
            </p>
            <menu>
                <button value="cancel">Cancel</button>
                <button value="confirm">I'm sure</button>
            </menu>
        </form>
</Modal>

<div class="container-fluid">
    <div class="row">
        <div class="col-md-10">
            <h1>Edit @adultToEditName</h1>
        </div>
        <div class="col-md-2">
            <button class="btn btn-outline-dark" @onclick="@(e => NavigationManager.NavigateTo("/adults"))">
                <span class="oi oi-arrow-thick-left" aria-hidden="true"></span>
                Back
            </button>
        </div>
    </div>
</div>

<EditForm Model="@adultToEdit" OnValidSubmit="@SaveEditedAdult">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <div class="form-group">
        First name:<br/>
        <InputText @bind-Value="adultToEdit.FirstName"/>
    </div>
    <div class="form-group">
        Last name:<br/>
        <InputText @bind-Value="adultToEdit.LastName"/>
    </div>
    <div class="form-group">
        Hair color:<br/>
        <InputText @bind-Value="adultToEdit.HairColor"/>
    </div>
    <div class="form-group">
        Eye color:<br/>
        <InputText @bind-Value="adultToEdit.EyeColor"/>
    </div>
    <div class="form-group">
        Age:<br/>
        <InputNumber @bind-Value="adultToEdit.Age"/>
    </div>
    <div class="form-group">
        Weight:<br/>
        <InputNumber @bind-Value="adultToEdit.Weight"/>
    </div>
    <div class="form-group">
        Height:<br/>
        <InputNumber @bind-Value="adultToEdit.Height"/>
    </div>
    <div class="form-group">
        Sex:<br/>
        <InputSelect @bind-Value="adultToEdit.Sex">
            <option value="">Select sex</option>
            <option value="F">Female</option>
            <option value="M">Male</option>
        </InputSelect>
    </div>
    <div class="form-group">
        Job:<br/>
        <InputSelect @bind-Value="selectedJob">
            <option value="">Select job</option>
            @foreach (var job in allJobs)
            {
                string jobValue = job.JobTitle;
                <option value="@jobValue">@job.JobTitle</option>
            }
        </InputSelect>
    </div>
    
</EditForm>
<button class="btn btn-outline-success" @onclick="e =>IsModalOpened=true">Edit adult</button>

@code {

    [Parameter]
    public int Id { get; set; }

    public bool IsModalOpened { get; set; }

    private Adult adultToEdit;
    private string adultToEditName;
    private List<Job> allJobs;
    private string selectedJob;

    protected async override Task OnInitializedAsync()
    {
        adultToEdit = FileAdapter.GetAdultById(Id);
        adultToEditName = $"{adultToEdit.FirstName} {adultToEdit.LastName}";
        selectedJob = adultToEdit.JobTitle.JobTitle;
        allJobs = FileAdapter.GetAllJobs();
    }

    private void OnModalClose(string value)
    {
        if (value.Equals("confirm"))
        {
            SaveEditedAdult();
        }
    }

    private void SaveEditedAdult()
    {
        AssignSelectedJob();
        FileAdapter.EditAdult(adultToEdit);
        NavigationManager.NavigateTo("/adults");
    }

    private void AssignSelectedJob()
    {
        Job temp = new Job();
        foreach (Job job in allJobs)
        {
            if (job.JobTitle.Equals(selectedJob))
            {
                temp = job;
            }
        }

        adultToEdit.JobTitle = temp;
    }

}