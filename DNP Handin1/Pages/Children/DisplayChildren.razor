@page "/children"
@using Models
@using DNP_Handin1.Data
@using Microsoft.AspNetCore.Components.Authorization
@inject IDataAdapter FileAdapter
@inject NavigationManager NavigationManager

<Modal @bind-Open="IsModalOpened" Close="OnClose">
    <form method="dialog">
        <p>
            Are you sure you want to delete?
        </p>
        <menu>
            <button value="cancel">Cancel</button>
            <button value="confirm">I'm sure</button>
        </menu>
    </form>
</Modal>

<div class="container-fluid">
    <div class="row">
        <div class="col-md-10">
            <h1>Children</h1>
        </div>
    </div>
</div>

@if (allChildren == null)
{
    <p>
        <em>Loading..</em>
    </p>
}
else if (!allChildren.Any())
{
    <p>
        <em>No data stored. Please add some</em>
    </p>
}
else
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-1">
                ID
                <input type="number" @oninput="@((arg) => FilterById(arg))" style="width: 50px"/>
            </div>
            <div class="col-md-2">
                First name
                <input type="text" @oninput="@((arg) => FilterByFirstName(arg))" style="width: 125px"/>
            </div>
        </div>

        <div class="row my-3">
            <div class="col-md-1"></div>
            <div class="col-md-2">
                Last name
                <input type="text" @oninput="@((arg) => FilterByLastName(arg))" style="width: 125px"/>
            </div>
        </div>
    </div>

    <table class="table">
        <thead>
        <tr>
            <th>ID</th>
            <th>First name</th>
            <th>Last name</th>
            <th>Age</th>
            <th>Sex</th>
            <AuthorizeView Policy="MustBeADMIN">
                <th>Remove</th>
                <th>Edit</th>
                <th>More details</th>
            </AuthorizeView>
        </tr>
        </thead>
        <tbody>
        @foreach (Child child in childrenToShow)
        {
            <tr>
                <td>@child.Id</td>
                <td>@child.FirstName</td>
                <td>@child.LastName</td>
                <td>@child.Age</td>
                <td>@child.Sex</td>
                <AuthorizeView Policy="MustBeADMIN">
                    <td>
                        <button class="btn btn-outline-danger" @onclick="@(() => {IsModalOpened = true; idToDelete = child.Id;})">
                            <i class="oi oi-circle-x"></i>
                        </button>
                    </td>
                    <td>
                        <button class="btn btn-outline-warning" @onclick="@(e => NavigationManager.NavigateTo($"/editchild/{child.Id}"))">
                            <span class="oi oi-pencil" aria-hidden="true"></span>
                        </button>
                    </td>
                    <td>
                        <button class="btn btn-outline-success" @onclick="@(() => OpenDetailedChildPage(child.Id))">
                            <span class="oi oi-arrow-thick-right" aria-hidden="true"></span>
                        </button>
                    </td>
                </AuthorizeView>

            </tr>
        }
        </tbody>
    </table>
}

@code
{
    [CascadingParameter]
    protected Task<AuthenticationState> AuthState { get; set; }
    
    public bool IsModalOpened { get; set; }
    public string SelectedButton { get; set; }

    private List<Child> allChildren = new List<Child>();
    private List<Child> childrenToShow = new List<Child>();

    private int? filterById = null;
    private string filterByLastName = "";
    private string filterByFirstName = "";
    private int idToDelete;

    protected override async Task OnInitializedAsync()
    {
        allChildren = await FileAdapter.GetAllChildrenAsync();
        ExecuteFilter();
    }

    private async void OpenDetailedChildPage(int id)
    {
        var user = (await AuthState).User;
        if (user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo($"/child/{id}");
        }
    }

    private void FilterById(ChangeEventArgs changeEventArgs)
    {
        filterById = null;
        try
        {
            filterById = int.Parse(changeEventArgs.Value.ToString());
            if (filterById < 0)
            {
                filterById = null;
            }
        }
        catch (Exception e)
        {
        }
        ExecuteFilter();
    }

    private void FilterByLastName(ChangeEventArgs changeEventArgs)
    {
        filterByLastName = "";
        try
        {
            filterByLastName = changeEventArgs.Value.ToString();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
        ExecuteFilter();
    }

    private void FilterByFirstName(ChangeEventArgs changeEventArgs)
    {
        filterByFirstName = "";
        try
        {
            filterByFirstName = changeEventArgs.Value.ToString();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
        ExecuteFilter();
    }

    private void ExecuteFilter()
    {
        childrenToShow = allChildren.Where(t =>
            ((filterById != null && t.Id == filterById) || filterById == null) &&
            ((!filterByLastName.Equals("") && t.LastName.Contains(filterByLastName)) || filterByLastName.Equals("")) &&
            ((!filterByFirstName.Equals("") && t.FirstName.Contains(filterByFirstName)) || filterByFirstName.Equals(""))
            ).ToList();
    }
    
    private async void OnClose(string value)
    {
        SelectedButton = value;
        if (SelectedButton.Equals("confirm") && idToDelete >= 0)
        {
            await RemoveChildAsync(idToDelete);
            idToDelete = -1;
        }
    }
    
    private async Task RemoveChildAsync(int id)
    {
        Console.WriteLine($"Removing child {id}");
        await FileAdapter.RemoveChildAsync(id);
        
        //reload list
        allChildren = await FileAdapter.GetAllChildrenAsync();
        ExecuteFilter();
    }
}