@page "/adults"
@using Models
@using DNP_Handin1.Data
@inject IFileAdapter FileAdapter
@inject NavigationManager NavigationManager

<div class="container-fluid">
    <div class="row">
        <div class="col-md-10">
            <h1>Adults</h1>
        </div>
        <div class="col-md-2">
            <AuthorizeView Policy="MustBeADMIN">
                <button class="btn btn-outline-success" @onclick="@(e => NavigationManager.NavigateTo("/addadult"))">
                    Add adult
                    <span class="oi oi-arrow-thick-right" aria-hidden="true"></span>
                </button>
            </AuthorizeView>

        </div>
    </div>
</div>


@if (allAdults == null)
{
    <p>
        <em>Loading..</em>
    </p>
}
else if (!allAdults.Any())
{
    <p>
        <em>No families stored. Please add some</em>
    </p>
}
else
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-1">
                ID
                <input type="number" @oninput="@((arg) => FilterById(arg))" style="width: 50px"/>
            </div>
            <div class="col-md-2">
                First name
                <input type="text" @oninput="@((arg) => FilterByFirstName(arg))" style="width: 125px"/>
            </div>
        </div>

        <div class="row my-3">
            <div class="col-md-1"></div>
            <div class="col-md-2">
                Last name
                <input type="text" @oninput="@((arg) => FilterByLastName(arg))" style="width: 125px"/>
            </div>
        </div>
    </div>

    <table class="table">
        <thead>
        <tr>
            <th>ID</th>
            <th>First name</th>
            <th>Last name</th>
            <th>Age</th>
            <th>Sex</th>
            <th>Job title</th>
        </tr>
        </thead>
        <tbody>
        @foreach (Adult adult in adultsToShow)
        {
            <tr @onclick="@(() => OpenDetailedAdultPage(adult.Id))">
                <td>@adult.Id</td>
                <td>@adult.FirstName</td>
                <td>@adult.LastName</td>
                <td>@adult.Age</td>
                <td>@adult.Sex</td>
                <td>@adult.JobTitle.JobTitle</td>
            </tr>
        }
        </tbody>
    </table>
}

@code
{
    [CascadingParameter] protected Task<AuthenticationState> AuthState { get; set; }
    
    private List<Adult> allAdults = new List<Adult>();
    private List<Adult> adultsToShow = new List<Adult>();

    private int? filterById = null;
    private string filterByLastName = "";
    private string filterByFirstName = "";

    protected override async Task OnInitializedAsync()
    {
        allAdults = FileAdapter.GetAllAdults();
        ExecuteFilter();
    }

    private async void OpenDetailedAdultPage(int id)
    {
        var user = (await AuthState).User;
        if (user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo($"/adult/{id}");
        }
    }

    private void FilterById(ChangeEventArgs changeEventArgs)
    {
        filterById = null;
        try
        {
            filterById = int.Parse(changeEventArgs.Value.ToString());
            if (filterById < 0)
            {
                filterById = null;
            }
        }
        catch (Exception e)
        {
        }
        ExecuteFilter();
    }

    private void FilterByLastName(ChangeEventArgs changeEventArgs)
    {
        filterByLastName = "";
        try
        {
            filterByLastName = changeEventArgs.Value.ToString();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
        ExecuteFilter();
    }

    private void FilterByFirstName(ChangeEventArgs changeEventArgs)
    {
        filterByFirstName = "";
        try
        {
            filterByFirstName = changeEventArgs.Value.ToString();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
        ExecuteFilter();
    }

    private void ExecuteFilter()
    {
        adultsToShow = allAdults.Where(t =>
            ((filterById != null && t.Id == filterById) || filterById == null) &&
            ((!filterByLastName.Equals("") && t.LastName.Contains(filterByLastName)) || filterByLastName.Equals("")) &&
            ((!filterByFirstName.Equals("") && t.FirstName.Contains(filterByFirstName)) || filterByFirstName.Equals(""))
            ).ToList();
    }

}